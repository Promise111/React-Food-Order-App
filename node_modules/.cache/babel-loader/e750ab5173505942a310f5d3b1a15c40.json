{"ast":null,"code":"var _jsxFileName = \"/Users/promise/Documents/my projects/learn react/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      const updatedItems = state.items.concat(action.item);\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n      if (state.items.some(item => item.name === action.item.name)) {\n        state.items[action.item.name] = [];\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n      break;\n\n    case \"REMOVE\":\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = itemId => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: itemId\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/promise/Documents/my projects/learn react/food-order-app/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","some","name","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","itemId","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,YAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,YAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD;;AAEE,UAAIR,KAAK,CAACH,KAAN,CAAYY,IAAZ,CAAkBJ,IAAD,IAAUA,IAAI,CAACK,IAAL,KAAcT,MAAM,CAACI,IAAP,CAAYK,IAArD,CAAJ,EAAgE;AAC9DV,QAAAA,KAAK,CAACH,KAAN,CAAYI,MAAM,CAACI,IAAP,CAAYK,IAAxB,IAAgC,EAAhC;AACD;;AACH,aAAO;AAAEb,QAAAA,KAAK,EAAEM,YAAT;AAAuBL,QAAAA,WAAW,EAAEQ;AAApC,OAAP;AACA;;AAEF,SAAK,QAAL;AACE;;AAEF;AACE,aAAON,KAAP;AACA;AAhBJ;AAkBD,CAnBD;;AAqBA,MAAMW,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCpB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAIA,QAAMmB,oBAAoB,GAAIV,IAAD,IAAU;AACrCS,IAAAA,kBAAkB,CAAC;AAAEZ,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMW,yBAAyB,GAAIC,MAAD,IAAY;AAC5CH,IAAAA,kBAAkB,CAAC;AAAEZ,MAAAA,IAAI,EAAE,QAAR;AAAkBgB,MAAAA,EAAE,EAAED;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAME,WAAW,GAAG;AAClBtB,IAAAA,KAAK,EAAEgB,SAAS,CAAChB,KADC;AAElBC,IAAAA,WAAW,EAAEe,SAAS,CAACf,WAFL;AAGlBsB,IAAAA,OAAO,EAAEL,oBAHS;AAIlBM,IAAAA,UAAU,EAAEL;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEG,WAA7B;AAAA,cACGP,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBD;;GAAMX,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      const updatedItems = state.items.concat(action.item);\n      const updatedTotalAmount =\n        state.totalAmount + action.item.price * action.item.amount;\n        if (state.items.some((item) => item.name === action.item.name)) {\n          state.items[action.item.name] = [];\n        }\n      return { items: updatedItems, totalAmount: updatedTotalAmount };\n      break;\n\n    case \"REMOVE\":\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (itemId) => {\n    dispatchCartAction({ type: \"REMOVE\", id: itemId });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}