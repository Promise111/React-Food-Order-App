{"ast":null,"code":"var _jsxFileName = \"/Users/promise/Documents/my projects/learn react/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = { ...existingCartItem,\n          amount: existingCartItem.amount + action.item.amount\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n      break;\n\n    case \"REMOVE\":\n      let removeUpdatedItems = [...state.items];\n      let removeI;\n      const removeItemIndex = removeUpdatedItems.findIndex(item => item.id === action.id);\n      console.log(removeItemIndex);\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = itemId => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: itemId\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/promise/Documents/my projects/learn react/food-order-app/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","removeUpdatedItems","removeI","removeItemIndex","console","log","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","itemId","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      const updatedTotalAmount =\n        state.totalAmount + action.item.price * action.item.amount;\n      const existingCartItemIndex = state.items.findIndex(\n        (item) => item.id === action.item.id\n      );\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = {\n          ...existingCartItem,\n          amount: existingCartItem.amount + action.item.amount,\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n      return { items: updatedItems, totalAmount: updatedTotalAmount };\n      break;\n\n    case \"REMOVE\":\n      let removeUpdatedItems = [...state.items];\n      let removeI\n      const removeItemIndex = removeUpdatedItems.findIndex(\n        (item) => item.id === action.id\n      );\n\n      console.log(removeItemIndex);\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (itemId) => {\n    dispatchCartAction({ type: \"REMOVE\", id: itemId });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}